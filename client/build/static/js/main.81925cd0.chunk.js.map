{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["READ_TODOS","gql","CREATE_TODO","REMOVE_TODO","UPDATE_TODO","App","input","useQuery","loading","error","data","useMutation","createTodo","deleteTodo","updateTodo","className","onSubmit","e","preventDefault","variables","text","value","window","location","reload","type","placeholder","ref","node","todos","map","todo","key","id","completed","onClick","Boolean","hostname","match","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"60BAKA,IAAMA,EAAaC,YAAH,KAUVC,EAAcD,YAAH,KAKXE,EAAcF,YAAH,KAMXG,EAAcH,YAAH,KA6EFI,MAvEf,WACE,IAAIC,EADS,EAEoBC,YAASP,GAAlCQ,EAFK,EAELA,QAASC,EAFJ,EAEIA,MAAOC,EAFX,EAEWA,KAFX,EAGQC,YAAYT,GAA1BU,EAHM,sBAIQD,YAAYR,GAA1BU,EAJM,sBAKQF,YAAYP,GAA1BU,EALM,oBAOb,OAAIN,EAAgB,sCAChBC,EAAc,qCACbC,EAGH,yBAAKK,UAAU,OACb,+CACA,0BACEC,SAAU,SAACC,GACTA,EAAEC,iBACFN,EAAW,CAAEO,UAAW,CAAEC,KAAMd,EAAMe,SACtCf,EAAMe,MAAQ,GACdC,OAAOC,SAASC,WAGlB,2BACET,UAAU,eACVU,KAAK,OACLC,YAAY,aACZC,IAAK,SAACC,GACJtB,EAAQsB,KAGZ,4BAAQb,UAAU,4BAA4BU,KAAK,UAAnD,WAIF,4BACGf,EAAKmB,MAAMC,KAAI,SAACC,GAAD,OACd,wBAAIC,IAAKD,EAAKE,GAAIlB,UAAU,SAC1B,0BAAMA,UAAWgB,EAAKG,UAAY,OAAS,WACxCH,EAAKX,MAER,4BACEL,UAAU,mDACVoB,QAAS,WACPtB,EAAW,CAAEM,UAAW,CAAEc,GAAIF,EAAKE,MACnCX,OAAOC,SAASC,WAJpB,KASA,4BACET,UAAS,iCACPgB,EAAKG,UAAY,cAAgB,YAEnCC,QAAS,WACPrB,EAAW,CAAEK,UAAW,CAAEc,GAAIF,EAAKE,MACnCX,OAAOC,SAASC,WAGjBO,EAAKG,UACJ,2CAEA,sDApDI,yC,eC7BAE,QACW,cAA7Bd,OAAOC,SAASc,UAEe,UAA7Bf,OAAOC,SAASc,UAEhBf,OAAOC,SAASc,SAASC,MACvB,2DCTN,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,kCAEPC,IAASC,OACP,kBAAC,IAAD,CAAgBJ,OAAQA,GACtB,kBAAC,EAAD,OAEFK,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACL4C,QAAQ5C,MAAMA,EAAM6C,c","file":"static/js/main.81925cd0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nconst READ_TODOS = gql`\n  query todos {\n    todos {\n      id\n      text\n      completed\n    }\n  }\n`;\n\nconst CREATE_TODO = gql`\n  mutation CreateTodo($text: String!) {\n    createTodo(text: $text)\n  }\n`;\nconst REMOVE_TODO = gql`\n  mutation RemoveTodo($id: String!) {\n    removeTodo(id: $id)\n  }\n`;\n\nconst UPDATE_TODO = gql`\n  mutation UpdateTodo($id: String!) {\n    updateTodo(id: $id)\n  }\n`;\n\nfunction App() {\n  let input;\n  const { loading, error, data } = useQuery(READ_TODOS);\n  const [createTodo] = useMutation(CREATE_TODO);\n  const [deleteTodo] = useMutation(REMOVE_TODO);\n  const [updateTodo] = useMutation(UPDATE_TODO);\n\n  if (loading) return <p>loading</p>;\n  if (error) return <p>Opps!!</p>;\n  if (!data) return <p>Not Found</p>;\n\n  return (\n    <div className=\"app\">\n      <h3>Create New Todo</h3>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          createTodo({ variables: { text: input.value } });\n          input.value = \"\";\n          window.location.reload();\n        }}\n      >\n        <input\n          className=\"form-control\"\n          type=\"text\"\n          placeholder=\"Enter todo\"\n          ref={(node) => {\n            input = node;\n          }}\n        ></input>\n        <button className=\"btn btn-primary px-5 my-2\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n      <ul>\n        {data.todos.map((todo) => (\n          <li key={todo.id} className=\"w-100\">\n            <span className={todo.completed ? \"done\" : \"pending\"}>\n              {todo.text}\n            </span>\n            <button\n              className=\"btn btn-sm btn-danger rounded-circle float-right\"\n              onClick={() => {\n                deleteTodo({ variables: { id: todo.id } });\n                window.location.reload();\n              }}\n            >\n              X\n            </button>\n            <button\n              className={`btn btn-sm float-right ${\n                todo.completed ? \"btn-success\" : \"btn-info\"\n              }`}\n              onClick={() => {\n                updateTodo({ variables: { id: todo.id } });\n                window.location.reload();\n              }}\n            >\n              {todo.completed ? (\n                <span>Completed</span>\n              ) : (\n                <span>Not completed</span>\n              )}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport ApolloClient from \"apollo-boost\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:5555/graphql\"\n});\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}